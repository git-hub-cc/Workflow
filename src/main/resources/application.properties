# ===================================================================
# SERVER CONFIGURATION
# ===================================================================
server.port=8080

# ===================================================================
# SPRING DATASOURCE CONFIGURATION (Using H2 In-Memory DB)
# ===================================================================
# 数据源URL：使用H2内存数据库，名为'workflowdb'。DB_CLOSE_DELAY=-1 确保JVM运行时数据库不关闭。
spring.datasource.url=jdbc:h2:mem:workflowdb;DB_CLOSE_DELAY=-1
spring.datasource.username=sa
spring.datasource.password=password
spring.datasource.driver-class-name=org.h2.Driver

# H2 数据库控制台，方便调试
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# ===================================================================
# JPA/HIBERNATE CONFIGURATION
# ===================================================================
# 让 Hibernate 自动根据实体类更新数据库表结构
spring.jpa.hibernate.ddl-auto=update
# 在日志中显示执行的SQL语句
spring.jpa.show-sql=true
# 格式化SQL日志
spring.jpa.properties.hibernate.format_sql=true

# ===================================================================
# CAMUNDA BPM PLATFORM CONFIGURATION (Embedded Engine)
# ===================================================================
# 自动部署 src/main/resources 目录下的BPMN, DMN, CMMN文件
camunda.bpm.auto-deployment-enabled=true

# 数据库 schema 管理：true 表示如果表不存在则创建
camunda.bpm.database.schema-update=true

# 引擎名称
camunda.bpm.process-engine-name=default

# 生成一个唯一的流程应用名称，避免部署冲突
camunda.bpm.generate-unique-process-application-name=true

# 开启 Camunda 作业执行器，用于处理定时器、异步任务等
camunda.bpm.job-execution.enabled=true

# Webapp 配置
# 禁用 CSRF 检查，简化开发环境的 API 调用 (生产环境请谨慎)
camunda.bpm.webapp.csrf.enable-cookie=false

# 为 Camunda Webapp (Cockpit, Tasklist) 创建一个默认管理员用户
camunda.bpm.admin-user.id=camunda-admin
camunda.bpm.admin-user.password=camunda-admin

# ===================================================================
# SECURITY (JWT) CONFIGURATION
# ===================================================================
# Base64编码的密钥，用于签名JWT。请在生产环境中替换为一个更长、更随机的值。
# 'c2VjcmV0LWtleS1mb3Itand0LXNlY3VyaXR5LXB1cnBvc2VzLW11c3QtYmUtbG9uZw==' -> 'secret-key-for-jwt-security-purposes-must-be-long'
app.jwt.secret=c2VjcmV0LWtleS1mb3Itand0LXNlY3VyaXR5LXB1cnBvc2VzLW11c3QtYmUtbG9uZw==
# Token 过期时间，单位：毫秒 (这里设置为24小时)
app.jwt.expiration-ms=86400000

# ===================================================================
# MAIL CONFIGURATION (For NotificationService)
# ===================================================================
# 为了演示，我们使用一个控制台打印邮件的模拟实现。
# 在真实环境中，请配置你的SMTP服务器。
spring.mail.host=smtp.example.com
spring.mail.port=587
spring.mail.username=user@example.com
spring.mail.password=secret
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
# 发件人地址
app.mail.from=noreply@workflow.com

# --- 【新增：文件存储配置】 ---
# 文件存储路径 (请根据你的服务器环境修改)
# Windows示例: C:/workflow/files/
# Linux/macOS示例: /var/data/workflow/files/
app.file.storage-path=./workflow-files/

# 设置单个文件的最大大小为 10MB
spring.servlet.multipart.max-file-size=10MB

# 设置整个 multipart 请求（可能包含多个文件）的最大大小为 10MB
spring.servlet.multipart.max-request-size=10MB